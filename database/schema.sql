-----------------------------------------
-- Drop old schema and create new one
-----------------------------------------

DROP TABLE IF EXISTS "user" CASCADE;
DROP TABLE IF EXISTS supplier CASCADE;
DROP TABLE IF EXISTS customer CASCADE;
DROP TABLE IF EXISTS sp_item CASCADE;
DROP TABLE IF EXISTS brand CASCADE;
DROP TABLE IF EXISTS subscription CASCADE;
DROP TABLE IF EXISTS subscription_secret CASCADE;
DROP TABLE IF EXISTS order CASCADE;

-----------------------------------------
-- Types
-----------------------------------------

CREATE DOMAIN PAST_TIMESTAMP AS TIMESTAMP(1) WITH TIME ZONE
DEFAULT CURRENT_TIMESTAMP(1) NOT NULL CHECK (VALUE <= CURRENT_TIMESTAMP(1));

CREATE TYPE USER_TYPE AS ENUM ('SUPPLIER', 'CUSTOMER');

CREATE TYPE ORDER_STAGE AS ENUM (
  'PURCHASE_ORDER',
  'REJECTED',
  'SALES_ORDER',
  'SALES_INVOICE',
  'PURCHASE_INVOICE',
  'COMPLETED'
);

-----------------------------------------
-- Tables
-----------------------------------------

-- All users. Each user is either a supplier or a customer.
CREATE TABLE "user"(
  user_id SERIAL PRIMARY KEY,
  tenant VARCHAR(20) NOT NULL,
  organization VARCHAR(20) NOT NULL,
  kind company_type NOT NULL,
  company_uuid UUID NOT NULL,
  createdat PAST_TIMESTAMP,

  CONSTRAINT UniqueUser UNIQUE(tenant, organization, kind, company_uuid)
);

-- All suppliers.
CREATE TABLE supplier(
  user_id INTEGER NOT NULL,
  -- ...

  FOREIGN KEY(user_id) REFERENCES
    "user"(user_id) ON DELETE CASCADE
);

-- All customers.
CREATE TABLE customer(
  user_id INTEGER NOT NULL,
  -- ...

  FOREIGN KEY(user_id) REFERENCES
    "user"(user_id) ON DELETE CASCADE
);

-- Double entry table matching Supplier's SalesItems with Customer's PurchaseItems.
CREATE TABLE sp_item(
  sp_item_id SERIAL PRIMARY KEY,
  supplier_id INTEGER NOT NULL,
  customer_id INTEGER NOT NULL,
  supplier_item_uuid UUID NOT NULL,
  customer_item_uuid UUID NOT NULL,
  createdat PAST_TIMESTAMP,

  FOREIGN KEY(supplier_id) REFERENCES
    supplier(supplier_id) ON DELETE CASCADE,
  FOREIGN KEY(customer_id) REFERENCES
    customer(customer_id) ON DELETE CASCADE
);

-- All registered supplier brands.
CREATE TABLE brand(
  brand_id SERIAL PRIMARY KEY,
  supplier_id INTEGER NOT NULL,
  brand_uuid UUID NOT NULL,
  createdat PAST_TIMESTAMP,

  FOREIGN KEY(supplier_id) REFERENCES
    supplier(supplier_id) ON DELETE CASCADE
);

-- All subscriptions of customer to supplier brands.
CREATE TABLE subscription(
  subscription_id SERIAL PRIMARY KEY,
  brand_id INTEGER NOT NULL,
  customer_id INTEGER NOT NULL,
  createdat PAST_TIMESTAMP,

  FOREIGN KEY(brand_id) REFERENCES
    brand(brand_id) ON DELETE CASCADE,
  FOREIGN KEY(customer_id) REFERENCES
    customer(customer_id) ON DELETE CASCADE
);

-- Subscription secret, generated by the supplier on demand and issued to the customer
CREATE TABLE subscription_secret(
  secret_id SERIAL PRIMARY KEY,
  brand_id INTEGER NOT NULL,
  secret_key UUID NOT NULL,

  FOREIGN KEY(brand_id) REFERENCES
    brand(brand_id) ON DELETE CASCADE,
)

-- All orders processed through the system.
CREATE TABLE order(
  order_id SERIAL PRIMARY KEY,
  subscription_id INTEGER NOT NULL,
  stage ORDER_STAGE NOT NULL,

  FOREIGN KEY(subscription_id) REFERENCES
    subscription(subscription_id) ON DELETE CASCADE
);
